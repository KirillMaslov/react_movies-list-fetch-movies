{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setMovies","_useState","useState","_useState2","_slicedToArray","movieTitle","setMovieTitle","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","setMovie","_Fragment","htmlFor","type","id","placeholder","cn","value","onChange","e","target","disabled","onClick","query","preventDefault","toLowerCase","fetch","concat","then","res","json","catch","Response","Error","responseMovie","Object","keys","includes","undefined","imageUrl","Poster","movieUrl","imdbID","Title","Plot","finally","forEach","listMovie","oldMovies","_toConsumableArray","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41c5bd10.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\n\ninterface Props {\n  movies: Movie[],\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n}\n\nexport const FindMovie: React.FC<Props> = ({\n  movies,\n  setMovies,\n}) => {\n  const [movieTitle, setMovieTitle] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [movie, setMovie] = useState<Movie>();\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': errorMessage,\n              })}\n              value={movieTitle}\n              onChange={(e) => {\n                setMovieTitle(e.target.value);\n                if (errorMessage) {\n                  setErrorMessage('');\n                }\n              }}\n            />\n          </div>\n\n          {errorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!movieTitle || !!errorMessage}\n              onClick={(e) => {\n                e.preventDefault();\n                setIsLoading(true);\n\n                getMovie(movieTitle.toLowerCase())\n                  .then(responseMovie => {\n                    if (Object.keys(responseMovie).includes('Error')) {\n                      setErrorMessage(\"Can't find a movie with such a title\");\n                      setMovie(undefined);\n                    }\n\n                    if (!('Error' in responseMovie)) {\n                      setErrorMessage('');\n\n                      const imageUrl = responseMovie.Poster !== 'N/A'\n                        ? responseMovie.Poster\n                        : 'https://via.placeholder.com'\n                        + '/360x270.png?text=no%20preview';\n                      const movieUrl = `https://www.imdb.com/title/${responseMovie.imdbID}`;\n\n                      setMovie({\n                        title: responseMovie.Title,\n                        description: responseMovie.Plot,\n                        imgUrl: imageUrl,\n                        imdbUrl: movieUrl,\n                        imdbId: responseMovie.imdbID,\n                      });\n                    }\n                  })\n                  .finally(() => {\n                    setIsLoading(false);\n                  });\n              }}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  let includes = false;\n\n                  movies.forEach(listMovie => {\n                    if (listMovie.imdbId === movie.imdbId) {\n                      includes = true;\n                    }\n                  });\n\n                  setMovie(undefined);\n                  setMovieTitle('');\n                  if (!includes) {\n                    setMovies((oldMovies) => {\n                      return [...oldMovies, movie];\n                    });\n                  }\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=f23808d';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie movies={movies} setMovies={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}